// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: cates.sql

package db

import (
	"context"
)

const createCate = `-- name: CreateCate :one
INSERT INTO cates (
  name
) VALUES (
  $1
) RETURNING id, name, created_at
`
type CreateCateParams struct {
	Name    string `json:"name"`
}

func (q *Queries) CreateCate(ctx context.Context, arg CreateCateParams) (Cate, error) {
	row := q.db.QueryRowContext(ctx, createCate, arg.Name)
	var i Cate
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getCate = `-- name: GetCate :one
SELECT id, name, created_at FROM cates
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCate(ctx context.Context, id int32) (Cate, error) {
	row := q.db.QueryRowContext(ctx, getCate, id)
	var i Cate
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listCates = `-- name: ListCates :many
SELECT id, name, created_at FROM cates
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCates(ctx context.Context, arg ListCatesParams) ([]Cate, error) {
	rows, err := q.db.QueryContext(ctx, listCates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cate{}
	for rows.Next() {
		var i Cate
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
